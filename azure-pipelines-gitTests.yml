parameters:
  - name: POST_RESULT
    displayName: Post GitHub issue with results
    type: boolean
    default: true
  - name: DIAGNOSTIC_OUTPUT
    displayName: Log diagnostic data
    type: boolean
    default: false
  - name: REPO_COUNT
    displayName: Repo Count
    type: string
    default: 100
  - name: REPO_START_INDEX
    displayName: Repo Start Index
    type: string
    default: 0
  - name: OLD_VERSION
    displayName: Baseline typescript package version
    type: string
    default: latest
  - name: NEW_VERSION
    displayName: Candidate typescript package version
    type: string
    default: next

schedules:
  - cron: "0 18 * * Sun" # time is in UTC
    displayName: Sunday overnight run
    always: true
    branches:
      include:
        - main

pr: none
trigger: none

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: ListRepos
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '16.x'
    displayName: 'Install Node.js'
  - script: |
      npm ci
      npm run build
      mkdir artifacts
      node dist/listTopRepos TypeScript ${{ parameters.REPO_COUNT }} ${{ parameters.REPO_START_INDEX }} artifacts/repos.json
    displayName: 'List top TS repos'
    env:
      GITHUB_PAT: $(GITHUB_PAT)
  - publish: artifacts
    artifact: RepoList
- job: 'DetectNewErrors'
  dependsOn: ListRepos
  timeoutInMinutes: 360
  steps:
  - download: current
    artifact: RepoList
  - task: NodeTool@0
    inputs:
      versionSpec: '16.x'
    displayName: 'Install Node.js'
  - script: |
      npm ci
      npm run build
      npm install -g pnpm
      node dist/gitErrors ${{ parameters.POST_RESULT }} ${{ parameters.OLD_VERSION }} ${{ parameters.NEW_VERSION }} '$(Pipeline.Workspace)/RepoList/repos.json' ${{ parameters.DIAGNOSTIC_OUTPUT }}
    env:
      GITHUB_PAT: $(GITHUB_PAT)
