parameters:
  - name: POST_RESULT
    displayName: Post GitHub comment with results
    type: boolean
    default: true
  - name: DIAGNOSTIC_OUTPUT
    displayName: Log diagnostic data
    type: boolean
    default: false
  - name: TOP_REPOS
    displayName: Whether to query Github for top TS repos by stars. If false, uses the user test suite.
    type: boolean
    default: false
  - name: REPO_COUNT
    displayName: Number of repositories to run on for when TOP_REPOS is set to true.
    type: number
    default: 100
  - name: OLD_TS_REPO_URL
    displayName: Old Typscript Repo Url
    type: string
    default: https://github.com/microsoft/TypeScript.git
  - name: OLD_HEAD_REF
    displayName: Old head reference
    type: string
    default: main
  - name: DISTINCT_ID
    displayName: Distinct ID
    type: string
  - name: REQUESTING_USER
    displayName: User to tag when the results are ready
    type: string
  - name: SOURCE_ISSUE
    displayName: PR ID in github
    type: number
  - name: STATUS_COMMENT
    displayName: Typescript-bot comment ID indicating that the run started
    type: number
  - name: MACHINE_COUNT
    displayName: Machine Count
    type: number
    default: 16
    values:
    - 1
    - 2
    - 4
    - 8
    - 16
  - name: ENTRYPOINT
    displayName: TypeScript entrypoint
    type: string
    default: tsc
    values:
    - tsc
    - tsserver
  - name: PRNG_SEED
    displayName: Pseudo-random number generator seed
    type: string
    default: 'n/a'

pr: none
trigger: none

pool:
  name: TypeScript-1ES-Large
  vmImage: ubuntu-22.04

variables:
  Codeql.Enabled: false
  skipComponentGovernanceDetection: true

jobs:
- job: ListRepos
  steps:
  - task: UseNode@1
    inputs:
      version: '20.x'
    displayName: 'Install Node.js'
  - script: |
      npm ci
      npm run build
      mkdir artifacts
  - script: node dist/listTopRepos TypeScript ${{ parameters.REPO_COUNT }} 0 artifacts/repos.json
    condition: eq('${{ parameters.TOP_REPOS }}', 'true')
    env:
      GITHUB_PAT: $(GITHUB_PAT)
    displayName: 'List top TS repos'
  - script: node dist/listUserTestRepos ./userTests artifacts/repos.json
    condition: ne('${{ parameters.TOP_REPOS }}', 'true')
    displayName: 'List user test repos'
  - publish: artifacts
    artifact: RepoList
- job: DetectNewErrors
  dependsOn: ListRepos
  timeoutInMinutes: 360
  strategy:
    parallel: ${{ parameters.MACHINE_COUNT }}
  steps:
  - download: current
    artifact: RepoList
  - task: UseNode@1
    inputs:
      version: '20.x'
    displayName: 'Install Node.js'
  - script: |
      npm ci
      npm run build
      npm install -g pnpm
      mkdir 'RepoResults$(System.JobPositionInPhase)'
      node dist/checkUserTestRepos ${{ parameters.ENTRYPOINT }} ${{ parameters.OLD_TS_REPO_URL }} ${{ parameters.OLD_HEAD_REF }} ${{ parameters.SOURCE_ISSUE }} ${{ parameters.TOP_REPOS }} '$(Pipeline.Workspace)/RepoList/repos.json' $(System.TotalJobsInPhase) $(System.JobPositionInPhase) 'RepoResults$(System.JobPositionInPhase)' ${{ parameters.DIAGNOSTIC_OUTPUT }} ${{ parameters.PRNG_SEED }}
    displayName: 'Run user tests'
    env:
      GITHUB_PAT: $(GITHUB_PAT)
  - publish: 'RepoResults$(System.JobPositionInPhase)'
    artifact: 'RepoResults$(System.JobPositionInPhase)'
- job: ReportNewErrors
  dependsOn: DetectNewErrors
  steps:
  - download: current
  - task: UseNode@1
    inputs:
      version: '20.x'
    displayName: 'Install Node.js'
  - script: |
      npm ci
      npm run build
      node dist/postGithubComments ${{ parameters.REQUESTING_USER }} ${{ parameters.SOURCE_ISSUE }} ${{ parameters.STATUS_COMMENT }} ${{ parameters.DISTINCT_ID }} ${{ parameters.TOP_REPOS }} '$(Pipeline.Workspace)' '$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts&type=publishedArtifacts' ${{ parameters.POST_RESULT }} ${{ parameters.REPO_COUNT }}
    displayName: 'Update PR comment with new errors'
    env:
      GITHUB_PAT: $(GITHUB_PAT)
